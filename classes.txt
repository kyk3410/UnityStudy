Class: a way to group related methods and variables together.
클래스 : 관련 메소드와 변수를 함께 그룹화하는 방법.

class Player{
	// methods and variables belonging to Player class come here
}

Inheritance
상속을 사용하는 경우 예를 들어 새는 날지만 펭귄은 조류이지만 날수가 없는 반면 수영을 할 수가있다 
이럴 경우에는 상속 대신에 컴포지션이라는 개념을 이용해 이것들을 정리할수 있다

Composition
이것은 클래스를 여러개로 세분화 해서 클래스 당 하나의 행동만 구현하는 것이다.
그래서 한 클래스는 수영만 구현하고, 다른 한 클래스는 하늘을 날기만 구현한다.
그래서 이제 어떤 동물이든지 연관된 컴포넌트들을 조립해서 생성해낼 수 있다.
또 만약 이러한 컴포넌트들이 일반적으로 자주 쓰이는 것들이라면, 다른 프로젝트에서도 사용할 수 있다.

Aim: keep code flexible, and minimize repetition

Inheritance and composition are tools which enables us to do this

1. Classes as behavioural components:
첫번째는 행동 컴포넌트 이다. 이것은 게임 내부의 물체들에 부착되어 그 물체들이 특정한 행동을 하게 한다.

These classes must inherit from Unity's MonoBehaviour class.
이 클래스들은 반드시 유니티의 MonoBehaviour클래스를 상속해야 한다. 이 클래스 안에는 공통적인 기능들이 포함되어 있다.
이 기능의 예시 중 하나는 Start 메소드인데, 우리가 만든 클래스 안에서 이 메소드를 사용하면 MonoBehaviour는 게임이 시작할때 그 메소드가 호출된다는 것을 보장해줍니다.
Update라는 메소드를 생성하면, MonoBehaviour는 그 메소드를
게임이 실행되는 모든 프레임마다 호출되는 것을 보장해주는 역할을 합니다.


