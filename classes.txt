Class: a way to group related methods and variables together.
클래스 : 관련 메소드와 변수를 함께 그룹화하는 방법.

class Player{
	// methods and variables belonging to Player class come here
}

Inheritance
상속을 사용하는 경우 예를 들어 새는 날지만 펭귄은 조류이지만 날수가 없는 반면 수영을 할 수가있다 
이럴 경우에는 상속 대신에 컴포지션이라는 개념을 이용해 이것들을 정리할수 있다

Composition
이것은 클래스를 여러개로 세분화 해서 클래스 당 하나의 행동만 구현하는 것이다.
그래서 한 클래스는 수영만 구현하고, 다른 한 클래스는 하늘을 날기만 구현한다.
그래서 이제 어떤 동물이든지 연관된 컴포넌트들을 조립해서 생성해낼 수 있다.
또 만약 이러한 컴포넌트들이 일반적으로 자주 쓰이는 것들이라면, 다른 프로젝트에서도 사용할 수 있다.

Aim: keep code flexible, and minimize repetition

Inheritance and composition are tools which enables us to do this

1. Classes as behavioural components:
첫번째는 행동 컴포넌트 이다. 이것은 게임 내부의 물체들에 부착되어 그 물체들이 특정한 행동을 하게 한다.

These classes must inherit from Unity's MonoBehaviour class.
이 클래스들은 반드시 유니티의 MonoBehaviour클래스를 상속해야 한다. 이 클래스 안에는 공통적인 기능들이 포함되어 있다.
이 기능의 예시 중 하나는 Start 메소드인데, 우리가 만든 클래스 안에서 이 메소드를 사용하면 MonoBehaviour는 게임이 시작할때 그 메소드가 호출된다는 것을 보장해줍니다.
Update라는 메소드를 생성하면, MonoBehaviour는 그 메소드를
게임이 실행되는 모든 프레임마다 호출되는 것을 보장해주는 역할을 합니다.

class Enemy:MonoBehaviour{
       public static int numberOfEnemiesAlive = 0;
       public int instanceExample = 0;

       void Start(){
	numberOfEnemiesAlive = numberOfEnemiesAlive + 1;
	instanceExample = instanceExample + 1;
       }
       void Update(){
	bool canSeePlayer = false;
	// setCanSeePlayer to true if the player is within a certain distance
	if(canSeePlayer){
		// attack the player
	}
      }
}

class OtherClass : MonoBehaviour{
       void SomeMethod(){
	int x = Enemy.numberOfEnemiesAlive;
	int y = Enemy.instanceExample;(X)
       }
}

Both have their own copy - instance - of the Enemy class
각가의 적들은 자신들의 복제물을 가질 수 있는데, 우리는 이것을 적 클래스의 '인스턴스'라고 부른다. 중요한 것은 서로 다른 인스턴스 내의 변수들은
게임 실행중에 서로 다른 값을 가질 수 있다는 것이다. 다시말해, 게임이 실행되고 있는 도중에 어떤 적의 canSeePlayer가 참이라면, 
동시에 또 다른 적의 canSeePlayer는 거짓일 수 있다는 것, 이런 류의 변수는 인스턴스 변수라고 부르는데, 이것은 이 변수들이 클래스의 인스턴스에 속해있기 때문이다
변수들은 기본적으로 인스턴스 변수이며, 즉 우리가 지금까지 보아왔던 변수들은 전부 인스턴스 변수임을 알 수있다
인스턴스 변수의 반대는 클래스 변수로, 이것은 해당 변수가 특정한 인스턴스에 속해있지 않고, 어떤 하나의 클래스에 속해있음을 의미한다
우리는 변수를 만들때 static을 붙여 클래스 변수를 만들 수 있습니다.
클래스 변수와 인스턴스 변수의 차이점을 알아보기 위해, 정적인 정수형 변수인 numberOfEemisAlive를 만들고, 또한 동적(non-static)인 정수형 변수인
instanceExample을 적 클래스 안에 만들었습니다.
5명의 적이 있다고 하고 게임이 사작하면, numberOfEnemisesAlive와 instanceExample은 1씩 추가된다. 이제 게임이 실행되는 중에 numberOfEnemiesAlive의 값은 5이지만,
instanceExample은 5명의 적들 따로 따로 1씩 추가되어 있는 상태이다.
이제 numberOfEnemiesAlive라는 변수를 다른 클래스에서 접근 하고 싶다고 해보자.
그렇다면 우성 변수 앞에 public을 붙여서 다른 클래스에서 접근을 가능하게 만든다.
이제 다른 클래스에서는 numberOfEnemiesAlive 변수에 간단히 Enemy.numberOfEnemisAlive라고 써서 접근이 가능하다.
이것은 클래스 이름을 쓰고, 그 뒤에 점을 붙인 뒤, 그 뒤에 변수의 이름을 쓴 것이다.
그런데, 만약 우리가 알고 싶은 것이 instaceExample이라면, 똑같은 방법으로 변수 값을 얻어올 수 있을까?
답은 아니다이다 그런 식으로 접근을 한다면, 컴퓨터는 어떤 인스턴스의 값을 말하는 것인지 물어볼 것이다 그리고 '물어본다'는 것은,컴퓨터가 에러를 표시한다는 뜻이다
이 예제는 인스턴스 변수와 클래스 변수의 다른 점이 무엇인지 확실하게 보여준다.
같은 개념이 static 메소드와 non-static 메소드에도 적용된다는 점을 기억하자.

2. Static classes.
전체 클래스를 static으로 만드는 것은 두 가지 큰 의미가 있다.
첫번째 클래스 안의 모든 변수와 메소드 역시 static이 되어야 한다는 것이고,
두번째 이 클래스를 우리의 게임 안에 부착할 수 없다는 것이다. 이것은 static이 우리로 하여금 그것의 인스턴스를 생성하는 것을 금지하기 때문이다.
반면, numberOfEnemiesAlive 예제에서 보았듯이 어떤 것을 static으로 만든다는 것은 다른 클래스에서 접근이 매우 용이해진다는 사실을 의미한다.
이러한 점 때문에, static 클래스는 다양한 도구(유틸리티)클래스를 만드는 데에 굉장히 특화되어 있다.
도구 클래스의 예제로는 수학이 있다.
수학 클래스 안에는 다양한 것들을 정의할 수 있다.

static class Maths{
     static float pi = 3.141592653f;
     
     static float SquareRoot(float n){
	float result = 0;
	// calculate sqrt of n and store in result variable
	return result;
     }
}

class OtherClass : MonoBehaviour{
     void SomeMethod(){
	float x = Maths.pi;
	float sqrtOfPi = Maths.SquareRoot(x);
     }
}

예를 들어 파이값을 나타내는 static 변수라던지, 또는 주어진 값들의 제곱근을 구하는 static 메소드가 있을 수 있다.
그리고 이것들을 public 으로 지정하여 다른 어떤 클래스가 파이 값을 알고 싶다면 단순히 Maths.pi 라고 써주면 된다.
아니면 제곱근을 계산하고 싶다면, 간단하게 Maths.squareRoot(x);라고 쓰면 된다.

