위치,속도 및 방향과 같은 것을 저장하는 데 사용하는 Vector 구조체

우리가 3차원 공간에서 작업 할 때 벡터를 정의하기 위해서는 x축, y축, z축의 세 값이 필요하며 이것을 Vector3라고 부른다.
2D공간에서 작업하면서 더 이상 z축을 필요로하지 않을 때 vector2를 대신 사용할 수 있다

벡터에 대해 간단하게 보면 x값이 -4이고 y값이 3인 Vector2를 정의한다고 가정 해본다, Vector의 일반적인 정의에서는 방향이 있는 양으로 나타낸다
크기, 또는 다른 용어로도 사용할 수 있다, 피타고라스의 정리를 사용하여 이 크기를 계산할 수 있다
이 경우 크기는 sqrt(-4^2 + 3^2)와 같다, 벡터의 방향을 계산하려면 벡터를 정규화해야 한다.
이렇게 하려면 x와 y값을 크기로 나누면된다 그래서 -4/5 = -.8, 그리고 3/5 = .6;  
방금 한 일의 중요성은 이 방향의 크기를 계산하면 sqrt(-.8^2+ .6^2); 1의 값을 얻을 것이다.
왜 이것이 중요한지에 대한 실질적인 예로서, 플레이어의 입력에서 vector2를 생성한다고 가정 해보자
Imagine the player is holding down the left and up key, so we have an input vector (-1;1)
이제 플레이어 오브젝트를 그 방향으로 3 단위 거리만큼 이동시키고 싶다고 말하면, 그래서 이 입력 벡터에 3을 곱해서 우리에게 -3;3)을 준다
그런 다음 플레이어 개체를 x축에서 -3단위, y축에서 3단위 이동한다, 그러나 플레이어가 움직인 거리를 측정하면 의도 한 3대신에 4.2정도라는 것을 알 수 있다
우리가 실수 한 결과로 플레이어는 대각선으로 이동할 때 더 빨리 움직일 수 있었다, 그리고 쉽게 실수를 하기 때문에 벡터를 방향으로 다루려면 먼저 벡터를 정규화해야된다
정규화 된 벡터를 단위 원의 내부에 완벽하게 맞추는 것이 도움이된다는 것을 알수있다
정규화되지 않은 입력 벡터는 (-1;1)의 값을 가지며 분명히 원의 바깥쪽에 있습니다 - 영상을 보면(2:09) 원이 있다
반면에 그것을 루트(2)의 크기로 나눗셈하여 정규화하면 약(-)의 값을 갖는다 (-0.71; 0.71)
벡터는 편리하게 x,y및 잠재적으로 z 값을 정의하기 때문에 방향과 속도뿐만 아니라 공간의 한 점을 정의하는 프로그래밍에 이 벡터를 사용한다
(-4;1)에 플레이어 오브젝트의 현재 위치를 나타내는 벡터가 있고 여기에 적 오브젝트의 위치를 어쩌면 (2;3)으로 나타내는 다른 벡터가 있다고 가정 해보면,
이제 플레이어의 위치를 빼면 (-6;-2)의 새로운 벡터로 끝난다, 이 새로운 벡터를 위치로 간주하는 것은 매우 의미가 없지만 플레이어와 적 사이의 변위로 간주되지만 매우 유용 할 수 있다
그 크기는 둘 사이의 거리이며, 우리가 정규화하면 적으로부터 플레이어쪽으로 향하게 된다.
magnitude = 루트40 = 6.24
direction = (-6/루트40; -2/루트40) = (-0.95;0.32)
두 가지 모두 계산할 수 있다는 점에서 매우 유용하다

Vector structs:
Vector2
Vector3
Vector4

벡터 구조체에는 Vector2,Vector3 및 심지어 Vector4는 유니티 라이브러리의 일부로 이미 존재한다, 이 코드의 맨 위에 'using UnityEngine'줄이 있다
모두 우리는 Vector3 구조체의 기본 버전을 만들거다, 코드에서 Vectors를 사용할 때 어떤 일이 벌어지고 있는지 더 잘 이해할 수 있다,
그들은 일부 코드의 컨테이너 역할을 한다. 이 둘 사이에는 몇가지 중요한 차이점이 있지만 나중에 다른 에피소드에서 고민할 것이다
구조체를 관련 변수를 그룹화하여 하나의 사용자 정의 변수 유형으로 묶는 방법으로 생각하고 싶다.
A way of grouping related variables together to form a custom variable type.
예를 들어, 우리는 현재 속도에 대한 벡터와 목표물이 추적하는 위치의 벡터를 추적해야하는 Enemy 클래스가 있다고 가정 해보자.
6개의 float 변수를 가질 수 있다, 3개는 속도를 정의하고, 3개는 목표의 위치를 정의한다.
그러나 x,y및 z가 함께 떠있는 벡터 구조체를 생성하면 3개의 숫자 집합을 나타낼 필요가있을 때마다 간단하게 이 사용자 정의 Vector변수를 사용할 수 있다
벡터 구조체 내부에는 생성자라고하는 코드가 있다, 구조체를 제대로 볼 때, 나중에 다른 시리즈에 설명
기본적으로 다음과 같이 작성하여 벡터 내부의 값을 설정할 수 있다. 
Vector3 velocity = newVector3(3, 4, 5);
Vector3 targetPosition = new Vector3(0,9,4);
예를 들어, velocity.x = 5와 같이 xy축과 z축의 값을 개별적으로 얻거나 설정할 수 있다.
유니티의 벡터 구조체 구현은
void SomeMethod(){
	velocity.x = 5;
	float speed = velocity.magnitude;
	Vector3 direction = velocity.normalized;
}
벡터의 크기 나 벡터의 정규화 된 값을 얻는 것과 같은 일을 하기위한 편리한 메소드를 포함한다.
마지막으로, 벡터에 대해 어떤 종류의 연산이 정의되어 있는지 이야기 해보자
우리는 벡터의 숫자를 곱할 수 있다.
Vector *scalar:
   (5,10,15)*2= (10,20,30) 해당 숫자를 곱하는 효과가 있고,
동일한 것을 나누기 할수도 있다
우리는 두 벡터를 함께 더할수도 있다, 단순히 같은 축을 더해 값을 내고 뺄셈에서도 마찬가지이다 
이것들은 Unity의 벡터 구조체에 대해 정의 된 유일한 기본 연산이다. 벡터를 numsubtract 두 벡터로 곱하거나 나눈다


